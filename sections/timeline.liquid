{% stylesheet %}
.timeline-section {
  padding: 60px 20px;
  text-align: center;
}

.timeline-heading {
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 40px;
}

.timeline-container {
  position: relative;
  margin: 0 auto;
  max-width: 1000px;
}

/* Vertical line down the middle */
.timeline-container::before {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%;
  width: 2px;
  background: #ccc;
  transform: translateX(-50%);
}

.timeline-item {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  margin: 40px 0;
  position: relative;
  width: 50%;
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.6s ease-out;
}

/* Markers */
.timeline-marker {
  width: 20px;
  height: 20px;
  background: #000;
  border-radius: 50%;
  position: absolute;
  top: 0;
  transform: translateX(-50%);
  left: 100%;
}

/* Content */
.timeline-content {
  background: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.timeline-icon img {
  width: 60px;
  height: auto;
  margin-bottom: 10px;
}

.timeline-title {
  font-size: 1.25rem;
  font-weight: bold;
  margin-bottom: 8px;
}

.timeline-description {
  font-size: 1rem;
  color: #555;
}

/* Zigzag positions */
.timeline-item:nth-child(odd) {
  left: 0;
  text-align: right;
}

.timeline-item:nth-child(odd) .timeline-marker {
  left: 100%;
}

.timeline-item:nth-child(even) {
  left: 50%;
}

.timeline-item:nth-child(even) .timeline-marker {
  left: 0%;
}

/* Animation trigger */
.timeline-item.visible {
  opacity: 1;
  transform: translateY(0);
}

/* Mobile - stack */
@media (max-width: 767px) {
  .timeline-container::before {
    left: 10px;
  }
  .timeline-item {
    width: 100%;
    padding-left: 40px;
    text-align: left !important;
  }
  .timeline-item:nth-child(even),
  .timeline-item:nth-child(odd) {
    left: 0;
  }
  .timeline-marker {
    left: 0 !important;
    transform: translateX(0);
  }
}
{% endstylesheet %}

<section class="timeline-section">
  {% if section.settings.heading != blank %}
    <h2 class="timeline-heading">{{ section.settings.heading }}</h2>
  {% endif %}
  <div class="timeline-container">
    {% for block in section.blocks %}
      <div class="timeline-item">
        <div class="timeline-marker"></div>
        <div class="timeline-content">
          {% if block.settings.icon != blank %}
            <div class="timeline-icon">
              <img src="{{ block.settings.icon | image_url: width: 80 }}" alt="{{ block.settings.title }}">
            </div>
          {% endif %}
          <h3 class="timeline-title">{{ block.settings.title }}</h3>
          <p class="timeline-description">{{ block.settings.description }}</p>
        </div>
      </div>
    {% endfor %}
  </div>
</section>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const items = document.querySelectorAll(".timeline-item");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
        }
      });
    },
    { threshold: 0.2 }
  );

  items.forEach((item) => observer.observe(item));
});
</script>

{% schema %}
{
  "name": "Timeline",
  "settings": [
    {
      "type": "header",
      "content": "Timeline Settings"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Our Process"
    }
  ],
  "blocks": [
    {
      "type": "step",
      "name": "Timeline Step",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Step Title",
          "default": "Step Title"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Step Description",
          "default": "Write a short description for this step."
        },
        {
          "type": "image_picker",
          "id": "icon",
          "label": "Step Icon/Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Timeline",
      "category": "Custom",
      "blocks": [
        { "type": "step" },
        { "type": "step" },
        { "type": "step" }
      ]
    }
  ]
}
{% endschema %}